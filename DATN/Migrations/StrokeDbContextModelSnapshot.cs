// <auto-generated />
using System;
using DATN.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DATN.Migrations
{
    [DbContext(typeof(StrokeDbContext))]
    partial class StrokeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DATN.Models.CaseHistory", b =>
                {
                    b.Property<int>("CaseHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("case_history_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CaseHistoryId"));

                    b.Property<string>("ProgressNotes")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("progress_notes");

                    b.Property<string>("StatusOfMr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status_of_mr");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("time");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("CaseHistoryId");

                    b.HasIndex("UserId");

                    b.ToTable("case_history", (string)null);
                });

            modelBuilder.Entity("DATN.Models.ClinicalIndicator", b =>
                {
                    b.Property<int>("ClinicalIndicatorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClinicalIndicatorID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClinicalIndicatorID"));

                    b.Property<bool>("BuonNon")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("BuonNon");

                    b.Property<bool>("ChongMat")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ChongMat");

                    b.Property<bool>("DauDau")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("DauDau");

                    b.Property<bool>("GiamThiLuc")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("GiamThiLuc");

                    b.Property<bool>("IsActived")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsActived");

                    b.Property<bool>("KhoNoi")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("KhoNoi");

                    b.Property<bool>("KhoNuot")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("KhoNuot");

                    b.Property<bool>("LuLan")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("LuLan");

                    b.Property<bool>("MatThangCan")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("MatThangCan");

                    b.Property<bool>("MatTriNhoTamThoi")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("MatTriNhoTamThoi");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("RecordedAt");

                    b.Property<int>("ReportCount")
                        .HasColumnType("int")
                        .HasColumnName("ReportCount");

                    b.Property<bool>("TeMatChi")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("TeMatChi");

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ClinicalIndicatorID");

                    b.HasIndex("UserID");

                    b.ToTable("clinical_indicator");
                });

            modelBuilder.Entity("DATN.Models.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("device_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DeviceId"));

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("device_name");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("device_type");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("series");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("stroke_user_user_id");

                    b.HasKey("DeviceId");

                    b.HasIndex("UserId");

                    b.ToTable("device", (string)null);
                });

            modelBuilder.Entity("DATN.Models.DoctorEvaluation", b =>
                {
                    b.Property<int>("DoctorEvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("doctor_evaluation_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DoctorEvaluationId"));

                    b.Property<int>("CaseHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("case_history_id");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctor_id");

                    b.Property<DateTime>("EvaluationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("evaluation_date");

                    b.Property<string>("EvaluationNotes")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("evaluation_notes");

                    b.HasKey("DoctorEvaluationId");

                    b.HasIndex("CaseHistoryId");

                    b.HasIndex("DoctorId");

                    b.ToTable("doctor_evaluations");
                });

            modelBuilder.Entity("DATN.Models.Gps", b =>
                {
                    b.Property<int>("GpsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("gps_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("GpsId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<float>("Lat")
                        .HasColumnType("float")
                        .HasColumnName("lat");

                    b.Property<float>("Lon")
                        .HasColumnType("float")
                        .HasColumnName("long");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("GpsId");

                    b.HasIndex("UserId");

                    b.ToTable("gps");
                });

            modelBuilder.Entity("DATN.Models.IndicatorSummary", b =>
                {
                    b.Property<int>("SummaryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SummaryID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SummaryID"));

                    b.Property<decimal?>("ClinicalScore")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("ClinicalScore");

                    b.Property<decimal?>("CombinedScore")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("CombinedScore");

                    b.Property<decimal?>("MolecularScore")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("MolecularScore");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("RecordedAt");

                    b.Property<decimal?>("SubclinicalScore")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("SubclinicalScore");

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("SummaryID");

                    b.HasIndex("UserID");

                    b.ToTable("indicator_summary");
                });

            modelBuilder.Entity("DATN.Models.InvitationCode", b =>
                {
                    b.Property<int>("InvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("invitation_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InvitationId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expires_at");

                    b.Property<int>("InviterUserId")
                        .HasColumnType("int")
                        .HasColumnName("inviter_user_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("InvitationId");

                    b.HasIndex("InviterUserId");

                    b.ToTable("invitation_codes", (string)null);
                });

            modelBuilder.Entity("DATN.Models.MedicalHistoryAttribute", b =>
                {
                    b.Property<int>("ValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ValueId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ValueId"));

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("AttributeName");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("DataType");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("GroupName");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Unit");

                    b.HasKey("ValueId");

                    b.ToTable("medicalhistoryattributes");
                });

            modelBuilder.Entity("DATN.Models.MedicalHistoryValue", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.Property<int>("AttributeId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeId");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("RecordedAt");

                    b.HasKey("UserId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("medicalhistoryvalues");
                });

            modelBuilder.Entity("DATN.Models.MedicalImage", b =>
                {
                    b.Property<int>("MedicalImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("medical_image_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MedicalImageId"));

                    b.Property<DateTime>("CapturedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("captured_at");

                    b.Property<int>("CaseHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("case_history_id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_url");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("metadata");

                    b.HasKey("MedicalImageId");

                    b.HasIndex("CaseHistoryId");

                    b.ToTable("medical_images");
                });

            modelBuilder.Entity("DATN.Models.MolecularIndicator", b =>
                {
                    b.Property<int>("MolecularIndicatorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MolecularIndicatorID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MolecularIndicatorID"));

                    b.Property<bool>("IsActived")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsActived");

                    b.Property<bool>("MiR_140_3p")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("miR_140_3p");

                    b.Property<bool>("MiR_16_5p")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("miR_16_5p");

                    b.Property<bool>("MiR_19b_5p")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("miR_19b_5p");

                    b.Property<bool>("MiR_20a_5p")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("miR_20a_5p");

                    b.Property<bool>("MiR_26b_5p")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("miR_26b_5p");

                    b.Property<bool>("MiR_30e_5p")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("miR_30e_5p");

                    b.Property<bool>("MiR_320d")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("miR_320d");

                    b.Property<bool>("MiR_320p")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("miR_320p");

                    b.Property<bool>("MiR_451a")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("miR_451a");

                    b.Property<bool>("MiR_874_5p")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("miR_874_5p");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("RecordedAt");

                    b.Property<int>("ReportCount")
                        .HasColumnType("int")
                        .HasColumnName("ReportCount");

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("MolecularIndicatorID");

                    b.HasIndex("UserID");

                    b.ToTable("molecular_indicator");
                });

            modelBuilder.Entity("DATN.Models.Relationship", b =>
                {
                    b.Property<int>("RelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("relationship_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RelationshipId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("InviterId")
                        .HasColumnType("int")
                        .HasColumnName("inviter_id");

                    b.Property<string>("RelationshipType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("relationship_type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("RelationshipId");

                    b.HasIndex("InviterId");

                    b.HasIndex("UserId");

                    b.ToTable("relationships", (string)null);
                });

            modelBuilder.Entity("DATN.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("DATN.Models.StrokeUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<bool>("Gender")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("gender");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_verified");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("patient_name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("phone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.ToTable("stroke_user", (string)null);
                });

            modelBuilder.Entity("DATN.Models.SubclinicalIndicator", b =>
                {
                    b.Property<int>("SubclinicalIndicatorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubclinicalIndicatorID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SubclinicalIndicatorID"));

                    b.Property<bool>("D_dimer")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("D_dimer");

                    b.Property<bool>("GFAP")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("GFAP");

                    b.Property<bool>("IsActived")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsActived");

                    b.Property<bool>("Lipids")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Lipids");

                    b.Property<bool>("MMP9")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("MMP9");

                    b.Property<bool>("NT_proBNP")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("NT_proBNP");

                    b.Property<bool>("Protein")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Protein");

                    b.Property<bool>("RBP4")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("RBP4");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("RecordedAt");

                    b.Property<int>("ReportCount")
                        .HasColumnType("int")
                        .HasColumnName("ReportCount");

                    b.Property<bool>("S100B")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("S100B");

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<bool>("VonWillebrand")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("vonWillebrand");

                    b.Property<bool>("sRAGE")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("sRAGE");

                    b.HasKey("SubclinicalIndicatorID");

                    b.HasIndex("UserID");

                    b.ToTable("subclinical_indicator");
                });

            modelBuilder.Entity("DATN.Models.UserMedicalData", b =>
                {
                    b.Property<int>("UserMedicalDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_medical_data_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserMedicalDataId"));

                    b.Property<float?>("BloodPh")
                        .HasColumnType("float")
                        .HasColumnName("blood_ph");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("int")
                        .HasColumnName("device_id");

                    b.Property<float?>("DiastolicPressure")
                        .HasColumnType("float")
                        .HasColumnName("diastolic_pressure");

                    b.Property<float?>("HeartRate")
                        .HasColumnType("float")
                        .HasColumnName("heart_rate");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("recorded_at");

                    b.Property<float?>("Spo2Information")
                        .HasColumnType("float")
                        .HasColumnName("spo2_information");

                    b.Property<float?>("SystolicPressure")
                        .HasColumnType("float")
                        .HasColumnName("systolic_pressure");

                    b.Property<float?>("Temperature")
                        .HasColumnType("float")
                        .HasColumnName("temperature");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("UserMedicalDataId");

                    b.HasIndex("DeviceId");

                    b.ToTable("user_medical_data", (string)null);
                });

            modelBuilder.Entity("DATN.Models.UserRegistrationTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<bool>("Gender")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("gender");

                    b.Property<string>("Otp")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("otp");

                    b.Property<DateTime>("OtpExpiry")
                        .HasColumnType("datetime")
                        .HasColumnName("otp_expiry");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("patient_name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("phone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("user_registration_temp", (string)null);
                });

            modelBuilder.Entity("DATN.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_role_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("DATN.Models.Warning", b =>
                {
                    b.Property<int>("WarningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("warning_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("WarningId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("WarningId");

                    b.HasIndex("UserId");

                    b.ToTable("warning", (string)null);
                });

            modelBuilder.Entity("DATN.Verification.UserVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_verified");

                    b.Property<DateTime>("OtpExpiry")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("otp_expiry");

                    b.Property<int?>("StrokeUserUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("verification_code");

                    b.HasKey("Id");

                    b.HasIndex("StrokeUserUserId");

                    b.HasIndex("UserId");

                    b.ToTable("user_verifications", (string)null);
                });

            modelBuilder.Entity("DATN.Models.CaseHistory", b =>
                {
                    b.HasOne("DATN.Models.StrokeUser", "StrokeUser")
                        .WithMany("CaseHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CaseHistory_StrokeUser_UserId");

                    b.Navigation("StrokeUser");
                });

            modelBuilder.Entity("DATN.Models.ClinicalIndicator", b =>
                {
                    b.HasOne("DATN.Models.StrokeUser", "StrokeUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StrokeUser");
                });

            modelBuilder.Entity("DATN.Models.Device", b =>
                {
                    b.HasOne("DATN.Models.StrokeUser", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_device_stroke_user_StrokeUserUserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DATN.Models.DoctorEvaluation", b =>
                {
                    b.HasOne("DATN.Models.CaseHistory", "CaseHistory")
                        .WithMany()
                        .HasForeignKey("CaseHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Models.StrokeUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaseHistory");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("DATN.Models.Gps", b =>
                {
                    b.HasOne("DATN.Models.StrokeUser", "StrokeUser")
                        .WithMany("Gps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StrokeUser");
                });

            modelBuilder.Entity("DATN.Models.IndicatorSummary", b =>
                {
                    b.HasOne("DATN.Models.StrokeUser", "StrokeUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StrokeUser");
                });

            modelBuilder.Entity("DATN.Models.InvitationCode", b =>
                {
                    b.HasOne("DATN.Models.StrokeUser", "InviterUser")
                        .WithMany("InvitationCodes")
                        .HasForeignKey("InviterUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InviterUser");
                });

            modelBuilder.Entity("DATN.Models.MedicalHistoryValue", b =>
                {
                    b.HasOne("DATN.Models.MedicalHistoryAttribute", "MedicalHistoryAttribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DATN.Models.StrokeUser", "StrokeUser")
                        .WithMany("MedicalHistoryValues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalHistoryAttribute");

                    b.Navigation("StrokeUser");
                });

            modelBuilder.Entity("DATN.Models.MedicalImage", b =>
                {
                    b.HasOne("DATN.Models.CaseHistory", "CaseHistory")
                        .WithMany()
                        .HasForeignKey("CaseHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaseHistory");
                });

            modelBuilder.Entity("DATN.Models.MolecularIndicator", b =>
                {
                    b.HasOne("DATN.Models.StrokeUser", "StrokeUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StrokeUser");
                });

            modelBuilder.Entity("DATN.Models.Relationship", b =>
                {
                    b.HasOne("DATN.Models.StrokeUser", "Inviter")
                        .WithMany()
                        .HasForeignKey("InviterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DATN.Models.StrokeUser", "User")
                        .WithMany("Relationships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inviter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DATN.Models.SubclinicalIndicator", b =>
                {
                    b.HasOne("DATN.Models.StrokeUser", "StrokeUser")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StrokeUser");
                });

            modelBuilder.Entity("DATN.Models.UserMedicalData", b =>
                {
                    b.HasOne("DATN.Models.Device", "Device")
                        .WithMany("UserMedicalDatas")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Device");
                });

            modelBuilder.Entity("DATN.Models.UserRole", b =>
                {
                    b.HasOne("DATN.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DATN.Models.StrokeUser", "StrokeUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("StrokeUser");
                });

            modelBuilder.Entity("DATN.Models.Warning", b =>
                {
                    b.HasOne("DATN.Models.StrokeUser", "StrokeUser")
                        .WithMany("Warnings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Warning_StrokeUser_UserId");

                    b.Navigation("StrokeUser");
                });

            modelBuilder.Entity("DATN.Verification.UserVerification", b =>
                {
                    b.HasOne("DATN.Models.StrokeUser", null)
                        .WithMany("UserVerifications")
                        .HasForeignKey("StrokeUserUserId");

                    b.HasOne("DATN.Models.StrokeUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserVerifications_StrokeUser");
                });

            modelBuilder.Entity("DATN.Models.Device", b =>
                {
                    b.Navigation("UserMedicalDatas");
                });

            modelBuilder.Entity("DATN.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DATN.Models.StrokeUser", b =>
                {
                    b.Navigation("CaseHistories");

                    b.Navigation("Devices");

                    b.Navigation("Gps");

                    b.Navigation("InvitationCodes");

                    b.Navigation("MedicalHistoryValues");

                    b.Navigation("Relationships");

                    b.Navigation("UserRoles");

                    b.Navigation("UserVerifications");

                    b.Navigation("Warnings");
                });
#pragma warning restore 612, 618
        }
    }
}
